services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.client
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
    volumes:
      - "./web/src:/app/src"
      - "./web/index.html:/app/index.html"
      - "./web/vite.config.ts:/app/vite.config.ts"
    user: "0:0"
    depends_on:
      - backend

  backend:
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
    build:
      context: .
      dockerfile: Dockerfile
    command: gow run /app/main.go
    volumes:
      - "./pkg:/app/pkg"
      - "./scripts:/app/scripts"
      - "./main.go:/app/main.go"
      - "./aws:/root/.aws"
    #ports:
    #  - 8080:8080
    environment:
      PG_URL: postgres://pguser:pgpassword@db:5432/pguser?search_path=public
      S3_ENDPOINT: http://127.0.0.1:8333
      WORKER_PG_HOST: db
      WORKER_PG_PORT: 5432
      WORKER_PG_DATABASE: pguser
      WORKER_PG_USER: pguser
      WORKER_PG_PASSWORD: pgpassword
      WORKER_PG_SCHEMA: public

  #weed:
  #  image: chrislusf/seaweedfs # use a remote image
  #  restart: always
  #  ports:
  #    - 8333:8333
  #  command: "-v=2 server -s3 -dir=/data -idleTimeout=0 -s3.config=/etc/seaweedfs/config.json"

  #  volumes:
      #- "/mnt/hdd/seaweed:/data"
  #    - "./appdata/seaweed:/data"
  #    - "./s3/config.json:/etc/seaweedfs/config.json"
  #    - "./s3/filer.toml:/etc/seaweedfs/filer.toml"

# Use postgres/example user/password credentials
  db:
    image: postgres
#    network_mode: host
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
      #- "./db/base.sql:/docker-entrypoint-initdb.d/0-base.sql"
      - "./db/base.sql:/docker-entrypoint-initdb.d/0-base.sql"
      #- "./db/data.sql:/docker-entrypoint-initdb.d/1-data.sql"
      - ./appdata/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: bash -c "exec 6<> /dev/tcp/localhost/5432"
      interval: 1s
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: pgpassword
      POSTGRES_USER: pguser

  #daemon:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile.daemon
  #  environment:
  #    #CRON_SAMPLE: '* * * * * echo 1 minute cron'
  #    CRON_ANOTHER_SAMPLE: '0 2 * * * python3 /app/sync_s3.py'
  #  depends_on:
  #    db:
  #      condition: service_healthy
  #      restart: true

  web:
    image: nginx
    volumes:
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    environment:
      - NGINX_HOST=foobar.com
      - NGINX_PORT=80
    depends_on:
      - backend
      - frontend

  minio:
    image: quay.io/minio/minio
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=password
      - MINIO_VOLUMES="/mnt/data"
      #- MINIO_OPTS="--console-address :9001"
    ports:
      - 9000:9000
      - 9001:9001
    command: server --console-address :9001
# MINIO_VOLUMES sets the storage volume or path to use for the MinIO server.


# MINIO_OPTS sets any additional commandline options to pass to the MinIO server.
# For example, `--console-address :9001` sets the MinIO Console listen port

